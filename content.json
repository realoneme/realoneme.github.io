{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"JS数组的数字和非数字下标","slug":"arrayindex","date":"2017-06-16T09:47:32.007Z","updated":"2017-06-16T10:23:46.424Z","comments":true,"path":"2017/06/16/arrayindex/","link":"","permalink":"http://yoursite.com/2017/06/16/arrayindex/","excerpt":"","text":"正在安静的撸码，PHP老公突然Q我，问，“你们JS里数组能用非数字下标吗。” 并没有仔细思考的我，扔给他一句，“不行，闹呢，2的32次方都不够使了么。” 然而，事情并没有如我所料的结束，片刻之后，他滴滴我，说“你个大混子，这是可以的。”然后扔给我一个截图。 JS的Array是可以有非数字下标的，就是有些行为怪异。你说这人非要用PHP什么的东西往JS里套，还来麻烦我，我能怎么办，我也很绝望啊。控制台里看一下吧。 123456let a=[];a[&apos;aa&apos;]=&apos;bb&apos;console.log(a);//[aa: &quot;bb&quot;]//aa: &quot;bb&quot;//length: 0 霸气的把length=0化了线zhuai给他。JSer们并不怎么用这个奇怪的写法是有原因的啊。length=0了你要我们怎么办！.pop()和.shift()等作用于数组元素的方法你要我们怎么用？恩？ 再者，如果不是 === 的情况下，JS很难分清’1’和1有什么区别。所以如果你的下标突然变成了一个字符串数字就有意思了。12345let a=[];a[&apos;aa&apos;]=&apos;bb&apos;;a[&apos;100&apos;]=&apos;vvvvv&apos;;console.log(a.length);//100 就是这么神奇。js表示’100’和100长得一样啊并没有区别啊那个引号是什么我读书少你别骗我。所以这个时候js会自动把a[‘100’]当成a[100]来使用，创建一个长度为100的Array，哪怕真实长度只有2……当给一个js数组添加字符串下标的时候，就相当于为该数组对象添加了一个自定义属性，这就是所谓的“字符串下标”。而为数组添加属性并不会增加数组长度，所以长度不会发生改变了。你到是能用key找到这个value，但是你并没有办法遍历它。12a.forEach(v=&gt;console.log(v))//&apos;vvvvv&apos; 看你只能得到后来增加的那个index为100的’dd’。 所以呢，来自stackoverflow的Michael Berkowski：“如果要使用的是一个完全由’字符串下标’组成的数组，那还是将其声明为一个Object类型的对象要更好一些。” 对啊，有对象干嘛还要找数组！数组长得比对象美吗！口亨！","categories":[],"tags":[]},{"title":"mongoDB一些基础命令","slug":"mongo","date":"2017-06-10T14:42:08.260Z","updated":"2017-06-10T14:42:08.261Z","comments":true,"path":"2017/06/10/mongo/","link":"","permalink":"http://yoursite.com/2017/06/10/mongo/","excerpt":"","text":"mongoDB一些mongoDB的简单操作。学node嘛，没有数据库怎么行，一点一点摸索着来吧。 下载mongo安装，再弄个客户端吧。Robomongo很好用，界面也蛮好看的。主要是支持最新的mongo版本。 安装好之后进入到安装目录的bin路径下，cmd中输入mongod --dbpath=当前数据库目录，就可以启动你的数据库了。 当前数据库目录的话，就是建个文件夹就行了。 mongo成功启动MongoDB后，再打开一个命令行窗口输入mongo，就可以进行数据库的一些操作。 help查询基本操作命令 show dbs显示数据库列表 show collections显示当前数据库中的集合，（mongoose.connect(储存的位置)）; show users 显示用户 use切换当前数据库 db.help() 显示数据库操作命令 MongoDB没有创建数据库的命令。但是可以通过以下操作建立一个数据库12use myDBdb.createCollection(&apos;user&apos;) 这样就创建了一个叫myDB的数据库。 db –查看当前数据库 use admin 切换数据库 db.stu.insert({name:&#39;zzzz&#39;}) 向当前数据库中的stu集合中插入一个文档，文档是一个json db.stu.find() 查找//{ “_id” : ObjectId(“5933b75405383639e06cf59d”), “name” : “hhhhh” } _id是主键，ObjectId类型。当向数据库的某个集合中插入一个文档的时候，mongodb会自动补一个主键 _id 每个文档的巨剑不会相同 业务无关性 db.dropDatabase() 删除当前数据库 db.stu.drop() 删除某个数据库的集合 remove 删除数据不删除集合 drop是删除整个集合","categories":[],"tags":[]},{"title":"Git基本操作指南","slug":"gitcommand","date":"2017-05-21T12:03:37.373Z","updated":"2017-05-21T12:03:37.373Z","comments":true,"path":"2017/05/21/gitcommand/","link":"","permalink":"http://yoursite.com/2017/05/21/gitcommand/","excerpt":"git命令同步新仓库git clone https address 查看仓库和远程仓库是否建立联系（要进入仓库）123git remote -vorigin https://github.com/realoneme/first.git (fetch)origin https://github.com/realoneme/first.git (push)","text":"git命令同步新仓库git clone https address 查看仓库和远程仓库是否建立联系（要进入仓库）123git remote -vorigin https://github.com/realoneme/first.git (fetch)origin https://github.com/realoneme/first.git (push) 把本地文件同步到git上123git add ./-A(用.或者-A)git commit -m &quot;comments&quot;git push origin master //推送到主干 git config(新用户设置用户名和email)12git config --global user.email&quot;xx@xx.com&quot;git config --global user.name&quot;Your Name&quot; 拉取代码（在这个仓库下）1git pull origin master 通过fork别人的仓库，在本地修改别人的代码123git remote add newname 别人仓库地址git remote update newnamegit pull newname master 然后就可以得到别人的代码在自己的仓库里 添加git共同开发者权限 添加协作人员 进入 仓库 点击 settings -&gt; collaborators 在里面 添加协作人员（git账户名）-&gt; 点击Add collaborator 协作人员 会收到 邮件 同意下 即可 注意：每个人员在 git push 之前 一定要 先 git pull 一下 然后再 git push 创建自己的git仓库创建目录1mkdir folder-name 并且支持连写，创建并进入目录1mkdir folder-name &amp;&amp; cd folder-name 初始化文件夹1git init 查看所有内容（以及隐藏文件）1ls -al 创建文件12touch index.txt (创建一般文件)touch .index(可以创建以.开头的文件) 查看文件内容1cat index.txt 在文件中写内容1234vi index.txt(进入编辑界面)i 进入编辑模式esc :q!(强制不保存退出)esc :wq(保存并退出) 提交文件到暂存区1git add filename / git add . /git add -A 快速提交，只针对提交过的文件有效1git commit -a -m &apos;注释&apos; 提交文件到历史区1git commit -m&apos;需要的提交注释&apos; 如果没有-m &#39;注释&#39;,就需要在编辑状态加上注释，:wq保存退出 查看git状态1git status 红色表示没有在暂存区中 绿色表示在暂存区中 查看git历史123456git logcommit b3d4f15034d58d2d805293bf4580fe2e8e88a956 （唯一版本号）Author: Rebecca &lt;mostsweethoney@qq.com&gt;Date: Sat May 20 10:30:39 2017 +0800 test 12git log --onelineb3d4f15 test 12git reflog查看所有历史版本 文件对比123git diff 比较工作区和暂存区git diff --cached 比较暂存区和历史区git diff master 比较工作区和历史区 从暂存区覆盖掉工作区1git checkout 文件名 从历史区覆盖掉工作区1git reset --hard id号 删除上一次添加暂存区的内容 先从历史区覆盖暂存区 再从暂存区覆盖工作区1git reset HEAD 文件名/git reset HEAD . 1git checkout 文件名 界面化工具sorceTreewebstorm插件在提交之前创建.gitignore文件 分支管理查看分支12$ git branch* master(现在在master) 建立分支先要在主干上提交过，才可以建立分支1git branch 分支名 创建的分支和master一样 切换分支1git checkout 分支名 删除分支1git branch -D 分支名 创建并切换到分支== git branch 分支名 + git checkout 分支名1git checkout -b dev 将内容提交到某个分支上（默认将代码放在工作区上，不属于任何分支，只有提交到某个分支上的时候，此文件才归属于特定的分支） fastForward主干没有任何东西，分支提交了新的代码，就可以将主干的指针快速指向到分支最新的代码上1git merge 分支名 合并之后将分支删除，本次合并结束 手动解决冲突当master和分支有冲突的时候，要手动改文件解决冲突，再在master上提交代码 远程操作建立文件 README.md .gitignore 提交到历史区 git add git commit -m 查看远程仓库git remote -v 建立远程仓库git remote add origin (git 地址，用https的) 把代码推到线上git push origin master -u (设置默认推送位置，以后只要写git push) github发布页面（只能访问静态页，不可以防止server） 需要一个特定的分支 gh-pages 将代码提交到这个分支上 推送大github上 在github的setting中可以找到这个网站 进入到自己项目目录 打开命令行窗口 git init 将项目目录 初始化为本地仓库然后 本地仓库和自己新建远程仓库 建立 联系 git remote add origin https://github.com/liwenli111/webApp.git git add . git commit -m”update” git push origin gh-pages 进入Settings 在下面会看到一个链接 （网页名称）https://liwenli111.github.io/webApp/index.html fork将别人代码的当前状态clone一份放在自己的仓库里，一个项目只能fork一次。原代码更新不会导致fork的代码更新 clone将线上的项目拉取到本地，拉下来之后就是git仓库并且已经添加好了git地址1git clone url 别名 (来克隆项目，并起别名) 1pull request 是向fork来的项目人发起合并请求 git remote add leader leader的地址$ git pull leader master（pull别人的仓库地址）合作开发提交代码的时候，需要先拉取代码，再push上去","categories":[],"tags":[]},{"title":"一点一点学node-01————基础知识","slug":"node01","date":"2017-05-21T12:03:26.017Z","updated":"2017-05-21T12:03:26.017Z","comments":true,"path":"2017/05/21/node01/","link":"","permalink":"http://yoursite.com/2017/05/21/node01/","excerpt":"作为一个只知道前端知识的文科跨行妹纸，怀着我细腻的心，我觉得一定一定还有很多小白和我一样，想学node，文档却看到一半看不懂。那么咱们就一起开始吧。就算成不了大神，也不能啥也不会，是不~~ node基础知识 01来一起敲敲代码，看看console里能输出些个啥？&lt;(￣︶￣)&gt; 安装node去这里下载最新版本咯！如果是学习的话，最新版可以支持更多的功能，有利于练习哦！戳这里-&gt; https://nodejs.org/en/ DOCS里有很多API的用法哦，如果英文不好的话，就去中文网学习吧！戳这里 –&gt;http://nodejs.cn/","text":"作为一个只知道前端知识的文科跨行妹纸，怀着我细腻的心，我觉得一定一定还有很多小白和我一样，想学node，文档却看到一半看不懂。那么咱们就一起开始吧。就算成不了大神，也不能啥也不会，是不~~ node基础知识 01来一起敲敲代码，看看console里能输出些个啥？&lt;(￣︶￣)&gt; 安装node去这里下载最新版本咯！如果是学习的话，最新版可以支持更多的功能，有利于练习哦！戳这里-&gt; https://nodejs.org/en/ DOCS里有很多API的用法哦，如果英文不好的话，就去中文网学习吧！戳这里 –&gt;http://nodejs.cn/如果在安装的时候没有选择全局执行，辣么，就继续往下看吧！ 后悔药一颗：如何配置环境变量？╰(￣▽￣)╭node可以在命令行下执行的原因：因为安装的时候，将可执行文件配置到了环境变量下。可是手残的我们，要怎么拯救无能的cmd框框呢。此电脑（右键）-&gt;属性-&gt;高级系统设置-&gt;环境变量（右下角）-&gt;在【系统变量】里找到Path，温柔地双击它-&gt;右边第一个【新建】按钮-&gt;把你的node的执行文件路径粘上去，这就拯救了手残的你！ node是什么？node是服务端运行js的环境可以让js跑在服务端里，操作文件系统，模块，包，操作系统API 说node之前再聊点时尚的：前端模块化要怎么进行模块化开发呢？以下几种方式都可以达到。 闭包 单例模式（不能解决命名冲突，调用时代码过长） requirejs(AMD)依赖前置 seajs(CMD)就近依赖，需要的时候再引进来这个模块 commonjs规范，node模块的实现 再说回node：node有什么特点？ 异步IO（定时器，回调函数都是异步） 单线程（JS的特性，node也是JS啊这是祖上留下来的本性）（插一句：看起来好厉害的多线程实现是怎么实现的？切换执行上下文，因为执行速度很快，所以感觉再做很多件事情） node一个进程只能开一个线程。（进程包含线程）。 所以总的来说，node就是一个可以异步输入输出的，一次只能干一件事情，但是有着备忘录的，而且一定会做完手头的事情之后，按照备忘录上记录着日程安排去做事的棒小伙儿！（什么什么，你说为什么不是姑娘？那么重的活儿你舍得让姑娘做吗？恩？） 事件环 靠事件驱动（当前的事件和之后的事件）也就是说，小本本上的事儿干完了，就结束进程可以睡觉了！ 既然node在服务端运行，那它的全局对象是だれ（谁）？前端的全局变量是window，服务端的是全局对象，是global在当前文件夹下可以直接使用的，都是全局对象例如：console 全局对象global家的七大姑八大姨哎呦，那么多亲戚，总有几个走得近的。那么就找几个经常串门儿的亲戚来介绍吧！ global上的属性，和五个特殊的形参。 node的世界中没有window属性node中的this是{}。 var 不能直接将内容挂载在global上， 没有var声明的，会挂载在global上。 Buffer process clearImmediate: [Function], 清除立即 clearInterval: [Function], clearTimeout: [Function], setImmediate: [Function], setInterval: [Function], setTimeout: [Function],(传参从第三个参数开始) console: [Getter] } log info dir error warn time timeEnd-&gt;这些方法都有 12345//setTimeoutfunction eat(p1,p2) &#123; console.log(p1, p2);&#125;setTimeout(eat,1000,&apos;banana&apos;,&apos;apple&apos;); 123456//console time timeEnd可以计算时间差console.time(&apos;start&apos;)//开始计时！这里是start下面也得用start哦！for(let i = 0;i&lt;100000;i++)&#123;&#125;//两次计时之间要干的事儿。console.timeEnd(&apos;start&apos;);//计时结束！//会给出两次打印的时差，以及打印的名字得一样。 12345setImmediate(function()&#123; //立即执行，不支持设置延迟时间，在不需要规定时间的时候，使用setImmediate //执行时间&lt;=setTimeout //是node的专属属性&#125;) process进程 几个常用方法 process.exit();//结束进程–exit code 0 process.kill(process.pid);//杀死进程 –exit code 1cmd查看这个端口被哪个进程占用，可以找到进程号，kill掉就可以了netstat -anto | findstr &quot;5050&quot; 1 . 区分开发环境和上线环境在电脑上设置变量 process.env代表当前进程的环境变量set NODE_EVN=development12345if(process.env.NODE_N === &apos;development&apos;)&#123; console.log(&apos;开发环境&apos;);&#125;else&#123; console.log(&apos;线上环境&apos;)&#125; 2 . process.nextTick 下个队列123456setImmediate(function () &#123; console.log(&apos;比nextTick慢&apos;)&#125;);process.nextTick(function () &#123; console.log(&apos;nextTick永远比setImmediate要快，重要的事情要放在nextTick中&apos;);&#125;);","categories":[],"tags":[]},{"title":"一点一点学node-02————基础知识","slug":"node02","date":"2017-05-21T12:03:14.080Z","updated":"2017-05-21T12:03:14.080Z","comments":true,"path":"2017/05/21/node02/","link":"","permalink":"http://yoursite.com/2017/05/21/node02/","excerpt":"&gt; module模块五个特殊形参 params node是基于commonjs规范的 如何使用模块。require使用模块。require方法是同步的。如果有callback的都是异步方法 文件模块。引用时，需要相对路径引用 ‘./ ../‘ 第三方模块 写模块名即可，不需要指出路径 核心（内置）模块 如何定义模块。在node中，一个js文件就是一个js模块 如何导出模块。 exports(如果使用exports导出，必须通过属性添加，否则无法挂载在module.exports上)—&gt; module.exports=exports={} module.exports(因为返回的是module.exports，所以可以直接改变module.exports的指针)","text":"&gt; module模块五个特殊形参 params node是基于commonjs规范的 如何使用模块。require使用模块。require方法是同步的。如果有callback的都是异步方法 文件模块。引用时，需要相对路径引用 ‘./ ../‘ 第三方模块 写模块名即可，不需要指出路径 核心（内置）模块 如何定义模块。在node中，一个js文件就是一个js模块 如何导出模块。 exports(如果使用exports导出，必须通过属性添加，否则无法挂载在module.exports上)—&gt; module.exports=exports={} module.exports(因为返回的是module.exports，所以可以直接改变module.exports的指针) 12345(function () &#123; // module.exports = this; module.exports = exports = &#123;&#125;; return module.exports&#125;)(); 多次require不会多次导入，默认会缓存到require.cache这个对象里 第三方模块都会安在node_modules文件夹下 全局第三方模块全局第三方模块：加了-g只能在命令行里使用 本地第三方模块在当前文件夹（当前项目）下使用 开发依赖 –save-dev/ -D 发布依赖 –save/ -S 初始化 npm init/npm init -y(自动确认)(如果外层文件有node_modules会安装到上层文件夹) 初始化时不能有汉字，特殊符号，而且也不能和要下载的模块重名 json里不可以有注释 卸载模块 npm uninstall –save/–save-dev 会把package依赖里也删除 发布包（多个模块组成一个包） npm addUser注册或者登录 npm whoami查看是否登录 npm publish 第三方模块会到当前目录下找node_modules，找名字和引用模块同名的文件夹，再找到package.json，找到入口文件，将其执行。如果当前目录下没有找到node_modules，会到上级目录继续查找，找到根路径为止，找不到就报错。核心模块（node自带的模块 fs http url…）util node自带的工具包，继承inherits123456789let util = require(&apos;util&apos;);function Parent() &#123; this.cardId = &apos;xxx1111&apos;;&#125;Parent.prototype.eat = function () &#123; console.log(&apos;eat&apos;)&#125;;function Child() &#123;&#125;util.inherits(Child,Parent) events node自带一个事件库发布订阅最常见的两个方法： on emit removeListener还有其他一些方法 once–只执行一次 removeAllListeners–移除所有事件","categories":[],"tags":[]},{"title":"一些有趣的npm包","slug":"npmbao","date":"2017-05-21T12:03:03.367Z","updated":"2017-05-21T12:03:03.367Z","comments":true,"path":"2017/05/21/npmbao/","link":"","permalink":"http://yoursite.com/2017/05/21/npmbao/","excerpt":"用些小工具可以事半功倍哦！ nrm模块默认下载模块通过的是npm下载，切换到国内(cnpm,taobao)npm install nrm -g安装后就有全局命令nrmnrm test展示每个镜像源的网速nrm use用哪个源 http-server 帮助用户启动一个服务，返回静态文件npm install http-server -g","text":"用些小工具可以事半功倍哦！ nrm模块默认下载模块通过的是npm下载，切换到国内(cnpm,taobao)npm install nrm -g安装后就有全局命令nrmnrm test展示每个镜像源的网速nrm use用哪个源 http-server 帮助用户启动一个服务，返回静态文件npm install http-server -g nodepptnpm install nodeppt -g 在想要执行的文件夹下，文件中包含slide1nodeppt start yarn 包管理器12345npm install yarn -gyarn init -yyarn add jquery@verson vue //默认是--saveyarn add babel-core -dev//只有开发依赖时候用-devyarn remove jquery","categories":[],"tags":[]}]}